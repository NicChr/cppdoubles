// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_double_equal_vectorised
SEXP cpp_double_equal_vectorised(SEXP x, SEXP y, SEXP tolerance);
RcppExport SEXP _cppdoubles_cpp_double_equal_vectorised(SEXP xSEXP, SEXP ySEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_double_equal_vectorised(x, y, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// cpp_double_gt_vectorised
SEXP cpp_double_gt_vectorised(SEXP x, SEXP y, SEXP tolerance);
RcppExport SEXP _cppdoubles_cpp_double_gt_vectorised(SEXP xSEXP, SEXP ySEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_double_gt_vectorised(x, y, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// cpp_double_gte_vectorised
SEXP cpp_double_gte_vectorised(SEXP x, SEXP y, SEXP tolerance);
RcppExport SEXP _cppdoubles_cpp_double_gte_vectorised(SEXP xSEXP, SEXP ySEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_double_gte_vectorised(x, y, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// cpp_double_lt_vectorised
SEXP cpp_double_lt_vectorised(SEXP x, SEXP y, SEXP tolerance);
RcppExport SEXP _cppdoubles_cpp_double_lt_vectorised(SEXP xSEXP, SEXP ySEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_double_lt_vectorised(x, y, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// cpp_double_lte_vectorised
SEXP cpp_double_lte_vectorised(SEXP x, SEXP y, SEXP tolerance);
RcppExport SEXP _cppdoubles_cpp_double_lte_vectorised(SEXP xSEXP, SEXP ySEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_double_lte_vectorised(x, y, tolerance));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cppdoubles_cpp_double_equal_vectorised", (DL_FUNC) &_cppdoubles_cpp_double_equal_vectorised, 3},
    {"_cppdoubles_cpp_double_gt_vectorised", (DL_FUNC) &_cppdoubles_cpp_double_gt_vectorised, 3},
    {"_cppdoubles_cpp_double_gte_vectorised", (DL_FUNC) &_cppdoubles_cpp_double_gte_vectorised, 3},
    {"_cppdoubles_cpp_double_lt_vectorised", (DL_FUNC) &_cppdoubles_cpp_double_lt_vectorised, 3},
    {"_cppdoubles_cpp_double_lte_vectorised", (DL_FUNC) &_cppdoubles_cpp_double_lte_vectorised, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_cppdoubles(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
