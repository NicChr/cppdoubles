// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// doubles.cpp
logicals cpp_double_equal(doubles x, doubles y, doubles tolerance);
extern "C" SEXP _cppdoubles_cpp_double_equal(SEXP x, SEXP y, SEXP tolerance) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_double_equal(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles>>(tolerance)));
  END_CPP11
}
// doubles.cpp
logicals cpp_double_gt(doubles x, doubles y, doubles tolerance);
extern "C" SEXP _cppdoubles_cpp_double_gt(SEXP x, SEXP y, SEXP tolerance) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_double_gt(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles>>(tolerance)));
  END_CPP11
}
// doubles.cpp
logicals cpp_double_gte(doubles x, doubles y, doubles tolerance);
extern "C" SEXP _cppdoubles_cpp_double_gte(SEXP x, SEXP y, SEXP tolerance) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_double_gte(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles>>(tolerance)));
  END_CPP11
}
// doubles.cpp
logicals cpp_double_lt(doubles x, doubles y, doubles tolerance);
extern "C" SEXP _cppdoubles_cpp_double_lt(SEXP x, SEXP y, SEXP tolerance) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_double_lt(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles>>(tolerance)));
  END_CPP11
}
// doubles.cpp
logicals cpp_double_lte(doubles x, doubles y, doubles tolerance);
extern "C" SEXP _cppdoubles_cpp_double_lte(SEXP x, SEXP y, SEXP tolerance) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_double_lte(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles>>(tolerance)));
  END_CPP11
}
// doubles.cpp
doubles cpp_double_rel_diff(doubles x, doubles y, doubles scale);
extern "C" SEXP _cppdoubles_cpp_double_rel_diff(SEXP x, SEXP y, SEXP scale) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_double_rel_diff(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles>>(scale)));
  END_CPP11
}
// doubles.cpp
logicals cpp_double_all_equal(doubles x, doubles y, doubles tolerance, logicals na_rm);
extern "C" SEXP _cppdoubles_cpp_double_all_equal(SEXP x, SEXP y, SEXP tolerance, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_double_all_equal(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles>>(tolerance), cpp11::as_cpp<cpp11::decay_t<logicals>>(na_rm)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_cppdoubles_cpp_double_all_equal", (DL_FUNC) &_cppdoubles_cpp_double_all_equal, 4},
    {"_cppdoubles_cpp_double_equal",     (DL_FUNC) &_cppdoubles_cpp_double_equal,     3},
    {"_cppdoubles_cpp_double_gt",        (DL_FUNC) &_cppdoubles_cpp_double_gt,        3},
    {"_cppdoubles_cpp_double_gte",       (DL_FUNC) &_cppdoubles_cpp_double_gte,       3},
    {"_cppdoubles_cpp_double_lt",        (DL_FUNC) &_cppdoubles_cpp_double_lt,        3},
    {"_cppdoubles_cpp_double_lte",       (DL_FUNC) &_cppdoubles_cpp_double_lte,       3},
    {"_cppdoubles_cpp_double_rel_diff",  (DL_FUNC) &_cppdoubles_cpp_double_rel_diff,  3},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_cppdoubles(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
